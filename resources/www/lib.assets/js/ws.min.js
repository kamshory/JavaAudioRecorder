var hostName = location.hostname; 
var portNumber = location.port;
var scheme = location.protocol;
var pathname = location.pathname
if(pathname == "/" || pathname == "")
{
    pathname = "/index.html";
}
var wsURL = createBaseURL(scheme, hostName, portNumber)+"/websocket/manager?path="+encodeURIComponent(pathname);
var ws = null;
var wsConnected = false;
var connetionInterval = setTimeout('', 1000);

function createBaseURL(protocol, host, port){
    var url = "";
    if(protocol.indexOf("https") != -1)
    {
        if(typeof port == 'undefined' || port == '' || port == 443)
        {
            var wsPort = 8080;
            url = "wss://"+host+":"+wsPort;
        }
        else
        {
            var wsPort = parseInt(port) + 1;
            url = "wss://"+host+":"+wsPort;
        }
    }
    else
    {
        if(typeof port == 'undefined' || port == '' || port == 80)
        {
            var wsPort = 8080;
            url = "ws://"+host+":"+wsPort;
        }
        else
        {
            var wsPort = parseInt(port) + 1;
            url = "ws://"+host+":"+wsPort;
        }
    }
    return url;
}

function initWebSocket()
{
    if ("WebSocket" in window) 
    {
        connectWebSocket();
    } 
    else 
    {
        console.log("WebSocket is not supported by your browser!");
    }
}
function connectWebSocket()
{
    wsConnected = false;
    console.log('Connecting...');
    ws = new WebSocket(wsURL);
        
    ws.onopen = function() {	   
        wsConnected = true;
        console.log('Connected...');
    };
    
    ws.onmessage = function (evt) { 
        serverUp();

        var receivedRaw = evt.data;
        var receivedJSON = JSON.parse(receivedRaw);
        if(receivedJSON.command == "broadcast-message")
        {
          for(var i in receivedJSON.data)
          {
            showNotif(receivedJSON.data[i].message);
          }
        }
        else if(receivedJSON.command == "server-shutdown")
        {
            waitingForServerUp();
        }
        else if(receivedJSON.command == "server-info")
        {
            updateServerInfo(receivedJSON);
        }
        if(typeof handleIncommingMessage != 'undefined')
        {
            handleIncommingMessage(receivedRaw);
        }
    };
    
    ws.onclose = function() { 	   
        wsConnected = false;
        clearTimeout(connectWebSocket);
        connetionInterval = setTimeout(function(){
            connectWebSocket();
            if(wsConnected)
            {
                clearTimeout(connectWebSocket);
            }
        }, 1500);
    };
    ws.onError = function()
    {
        wsConnected = false;
        clearTimeout(connectWebSocket);
        connetionInterval = setTimeout(function(){
            connectWebSocket();
            if(wsConnected)
            {
                clearTimeout(connectWebSocket);
            }
        }, 1500);
    }
}




$(document).ready(function(e){
    $('body').append('<div class="notification-container"></div>');
    $(document).on('change', 'thead input[type="checkbox"].check-all', function (e) {
        var checked = $(this).prop('checked');
        $(this).closest("table").find('tbody input[type="checkbox"].check-all').each(function (e2) {
            $(this).prop('checked', checked);
        });
    });
    $(document).on('click', '.notification-close a', function(e2){
        $(this).closest('.notification-item').remove();
    });
    initWebSocket();
});

